#pragma once
// identifier
void PrintBytes(IN BYTE* pbPrintData, IN DWORD cbDataLen);
// The first step in performing the AES encryption algorithm is creating the expanded keys from the given cipher key.
/* GLOBAL VARIABLES */
int bytes_possible[] = {
	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,	0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,	0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,	0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,	0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,	0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,	0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,	0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};
int s_boxes[] = {
	0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
	0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
	0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
	0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
	0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
	0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
	0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
	0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
	0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
	0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
	0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
	0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
	0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
	0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
	0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
	0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};
/* END OF GLOBAL VARIABLES */

/* PRE-DEFINED FUNCTIONS */
BYTE * RotWord(BYTE word[])																// it works
{
	BYTE tmp = word[0];
	for (int i = 0; i < 3; i++)
	{
		word[i] = word[i + 1];
	}
	word[3] = tmp;
	return word;
}

BYTE * SubWord(BYTE word[])
{
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 256; j++) {
			if (bytes_possible[j] == word[i]) {
				word[i] = s_boxes[j];
			}
		}
	}
	return word;
}

BYTE SubByte(BYTE input)
{
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 256; j++) {
			if (bytes_possible[j] == input) {
				input = s_boxes[j];
			}
		}
	}
	return input;
}

/* END OF PRE-DEFINED FUNCTIONS*/

void aesEncrypt(
	PBYTE     plaintext,
	PBYTE    ciphertext,
	BYTE   cipher_key[],
	int				buf)
{
	/* LOCAL VARIABLES */
	const int	R					=		11;											// round keys needed. this value is set for 11 for 128-bit keys
	const int	N					=		4;											// length of key in words. the key will always be 128-bits
	const BYTE	rcon[]				=		{0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
	static BYTE** W					= (BYTE**) malloc(sizeof(BYTE*) * (4 * R));
	for (int i = 0; i < (4 * R); i++) {
		W[i] = (BYTE*)malloc(sizeof(BYTE) * 4);
	}
	BYTE		K[4][4];

	static int count = 0;
	for (int i = 0; i < N; i++) {
		K[i][0] = cipher_key[count];
		count++;
		K[i][1] = cipher_key[count];
		count++;
		K[i][2] = cipher_key[count];
		count++;
		K[i][3] = cipher_key[count];
		count++;
	}

	for (int i = 0; i < 4 * R; i++) {
		int k = i % N;
		if (i < N) {
			memcpy(W[i], K[i], sizeof(K[i]));
		}
		else if (i >= N && k == 0) {

			BYTE T[4] = { 0x00, 0x00, 0x00, 0x00 };
			BYTE tmp[4] = { 0x00, 0x00, 0x00, 0x00 };
			BYTE tmp2[4] = { 0x00, 0x00, 0x00, 0x00 };
			memcpy(tmp, W[i - 1], sizeof(W[i - 1]));
			memcpy(tmp2, W[i - N], sizeof(W[i - N]));
			memcpy(T, SubWord(RotWord(tmp)), sizeof(tmp));													


			W[i][0] = tmp2[0] ^ T[0] ^ rcon[i / N];
			W[i][1] = tmp2[1] ^ T[1] ^ rcon[i / N];
			W[i][2] = tmp2[2] ^ T[2] ^ rcon[i / N];
			W[i][3] = tmp2[3] ^ T[3] ^ rcon[i / N];
		}
		else if (i >= N && N > 6 && k == 4) {
			BYTE T[4] = { 0x00, 0x00, 0x00, 0x00 };
			BYTE tmp[4] = { 0x00, 0x00, 0x00, 0x00 };
			BYTE tmp2[4] = { 0x00, 0x00, 0x00, 0x00 };
			memcpy(tmp, W[i - 1], sizeof(W[i - 1]));
			memcpy(tmp2, W[i - N], sizeof(W[i - N]));
			memcpy(T, SubWord(tmp), sizeof(tmp));

			W[i][0] = tmp2[0] ^ T[0];
			W[i][1] = tmp2[1] ^ T[1];
			W[i][2] = tmp2[2] ^ T[2];
			W[i][3] = tmp2[3] ^ T[3];
		}
		else {
			BYTE tmp[4] = { 0x00, 0x00, 0x00, 0x00 };
			memcpy(tmp, W[i - 1], sizeof(W[i - 1]));
			BYTE tmp2[4] = { 0x00, 0x00, 0x00, 0x00 };
			memcpy(tmp2, W[i - N], sizeof(W[i - N]));
			W[i][0] = tmp2[0] ^ tmp[0];
			W[i][1] = tmp2[1] ^ tmp[1];
			W[i][2] = tmp2[2] ^ tmp[2];
			W[i][3] = tmp2[3] ^ tmp[3];
		}
		
	}
	
	/* AES ENCRYPTION */
	/* creating the perfect squares */
	int remainder = buf % 16;
	int gap = 16 - remainder;
	int square = buf + gap;
	for (int p = buf; p < square; p++)
	{
		plaintext[p] = 0x00;
	}

	/* separate plaintext into blocks */
	for (int block = 0; block <= (buf / 16); block++)
	{
		int adder = block * 16;
		/* Initial Round Key Addition */
		for (int elem = 0; elem < 16; elem++) 
		{
			ciphertext[(elem + adder)] = plaintext[(elem + adder)] ^ W[0][elem];
		}
		/* the 9 rounds */
		for (int r = 0; r < 9; r++)
		{
			/* SubBytes */
			for (int elem = 0; elem < 16; elem++)
			{
				ciphertext[(elem + adder)] = SubByte(ciphertext[(elem + adder)]);
			}
			/* ShiftRows */
			for (int row = 0; row < 4; row++)
			{
				for (int instances = 0; instances < row; instances++)
				{
					BYTE tmp = ciphertext[(row + adder)];
					for (int a = 0; a < 3; a++)
					{
						ciphertext[(row + adder + (a * 4))] = ciphertext[(row + adder + (a * 4) + 4)];
					}
					ciphertext[(row + adder + 12)] = tmp;
				}
			}
			/* MixColumns */
		}
	}

	PrintBytes(plaintext, square);
	printf("\n\n\n\n");
	PrintBytes(ciphertext, square);
}

void destroyArray(BYTE** arr) {
	free(*arr);
	free(arr);
}